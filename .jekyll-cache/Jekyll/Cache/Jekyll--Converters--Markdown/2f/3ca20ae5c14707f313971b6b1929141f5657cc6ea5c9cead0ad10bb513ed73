I"“<p>Jonghwan Kim, <strong>Daehee Jang</strong>, Yunjong Jeong, Brent Byunghoon Kang<br />
<strong>Abstract:</strong> 
Object Layout Randomization (OLR) is a memory
randomization approach that makes unpredictable in-object
memory layout by shuffling and relocating each member fields
of the object. This defense approach has significant security
effect for mitigating various types of memory error attacks.
However, the current state-of-the-art enforces OLR while compile
time. It makes diversified object layout for each binary, but the
layout remains equal across the execution. This approach can be
effective in case the program binary is hidden from attackers.
However, there are several limitations: (i) the security efficacy
is built with the premise that the binary is safely undisclosed
from adversaries, (ii) the randomized object layout is identical
across multiple executions, and (iii) the programmer should
manually specify which objects should be affected by OLR. In this
paper, we introduce Per-allocation Object Layout Randomization
(POLaR): the first dynamic approach of OLR suited for public
binaries. The randomization mechanism of POLaR is applied</p>

:ET