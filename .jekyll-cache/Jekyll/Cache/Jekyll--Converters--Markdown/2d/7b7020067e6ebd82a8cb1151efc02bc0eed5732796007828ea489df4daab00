I"<p>Soyeon Park, Wen Xu, Insu Yun, <strong>Daehee Jang</strong>, and Taesoo Kim.<br />
<strong>Abstract:</strong> 
Fuzzing is a practical, widely-deployed technique
to find bugs in complex, real-world programs like JavaScript
engines. We observed, however, that existing fuzzing approaches,
either generative or mutational, fall short in fully harvesting highquality input corpora such as known proof of concept (PoC)
exploits or unit tests. Existing fuzzers tend to destruct subtle
semantics or conditions encoded in the input corpus in order to
generate new test cases because this approach helps in discovering
new code paths of the program. Nevertheless, for JavaScript-like
complex programs, such a conventional design leads to test cases
that tackle only shallow parts of the complex codebase and fails
to reach deep bugs effectively due to the huge input space.
In this paper, we advocate a new technique, called an aspectpreserving mutation, that stochastically preserves the desirable
properties, called aspects</p>

:ET