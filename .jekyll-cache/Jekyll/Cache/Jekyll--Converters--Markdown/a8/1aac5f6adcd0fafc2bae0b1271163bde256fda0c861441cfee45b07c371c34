I"ç<p>Brian Wickman, Hong Hu, Insu Yun, <strong>Daehee Jang</strong>, JungWon Lim, Sanidhya Kashyap, and Taesoo Kim.<br />
Abstract: Memory-unsafe languages are widely used to implement critical systems like kernels and browsers, leading to thousands
of memory safety issues every year. 
A use-after-free bug is
a temporal memory error where the program accidentally
visits a freed memory location. Recent studies show that useafter-free is one of the most exploited memory vulnerabilities.
Unfortunately, previous efforts to mitigate use-after-free bugs
are not widely deployed in real-world programs due to either
inadequate accuracy or high performance overhead.
In this paper, we propose to resurrect the idea of one-time
allocation (OTA) and provide a practical implementation with
efficient execution and moderate memory overhead. With onetime allocation, the memory manager always returns a distinct</p>

:ET