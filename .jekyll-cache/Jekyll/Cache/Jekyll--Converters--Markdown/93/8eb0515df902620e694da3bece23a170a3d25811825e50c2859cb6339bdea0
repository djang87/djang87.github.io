I"i<p>Authors: Daehee Jang, Yunjong Jung, Seongman Lee, Minjoon Park, Donguk Kim, Kuenhwan Kwak<br />
<!--more-->
<strong>Abstract:</strong>
A number of state-of-the-art software analysis platforms are built up based on system emulators owing to the need for effectively analyzing unknown program (i.e., execution path exploration). In general, malware has the ability to equip itself with powerful anti-emulation techniques to fingerprint the emulated system environment, thereby avoiding runtime analysis. However, this is not the only use case of anti-emulation. Recently, software vendors often leverage anti-emulation techniques to prevent their products reverse-engineered by attackers equipped with emulators. In this paper, we flip the conventional paradigm and explore anti-emulation techniques and discuss their efficacy in terms of \emph{protecting commercially deployed software} against malicious emulators. In this paper, we discuss several ideas of anti-emulation techniques suited for large-scale commercial software. According to our study, deliberately misaligning the vectorization instruction (e.g., Intel SIMD, ARM NEON) can be served as a promising emulator detection technique over previous approaches. Based on the abnormal use of CPU vectorization technology, we design and implement efficient user level anti-emulation technique that outperforms previous methods in three aspects: (i) performance, (ii) accuracy, and (iii) reliability. To demonstrate the efficacy of our design, we implemented the detection algorithm as Android JNI library and tested against 174 ARM-based android devices and several emulators.</p>

:ET