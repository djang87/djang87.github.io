I"™<p>Authors:Soyeon Park, Wen Xu, Insu Yun, <strong>Daehee Jang</strong>, and Taesoo Kim.<br />
<!--more-->
<strong>Abstract:</strong> 
Fuzzing is a practical, widely-deployed technique
to find bugs in complex, real-world programs like JavaScript
engines. We observed, however, that existing fuzzing approaches,
either generative or mutational, fall short in fully harvesting highquality input corpora such as known proof of concept (PoC)
exploits or unit tests. Existing fuzzers tend to destruct subtle
semantics or conditions encoded in the input corpus in order to
generate new test cases because this approach helps in discovering
new code paths of the program. Nevertheless, for JavaScript-like
complex programs, such a conventional design leads to test cases
that tackle only shallow parts of the complex codebase and fails
to reach deep bugs effectively due to the huge input space.
In this paper, we advocate a new technique, called an aspectpreserving mutation, that stochastically preserves the desirable
properties, called aspects
that we prefer to be maintained across
mutation. We demonstrate the aspect preservation with two
mutation strategies, namely, structure and type preservation, in
our fully-fledged JavaScript fuzzer, called DIE. Our evaluation
shows that DIEâ€™s aspect-preserving mutation is more effective in
discovering new bugs (5.7Ã— more unique crashes) and producing
valid test cases (2.4Ã— fewer runtime errors) than the state-ofthe-art JavaScript fuzzers. DIE newly discovered 48 high-impact
bugs in ChakraCore, JavaScriptCore, and V8 (38 fixed with 12
CVEs assigned as of today). The source code of DIE is publicly
available as an open-source project.</p>

:ET